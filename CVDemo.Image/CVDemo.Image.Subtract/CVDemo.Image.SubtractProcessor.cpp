#include "stdafx.h"
#include <stdio.h>
#include <string>
#include <iostream>
#include <sstream>
#include <vector>
#include <opencv2/imgcodecs.hpp>
#include "CVDemo.Image.SubtractProcessor.hpp"

using namespace cv;
using namespace std;


namespace cvdemo
{
	namespace image
	{
		int SubtractProcessor::processImages(const std::vector<std::string> fgImageFiles)
		{
			// create GUI windows
			namedWindow("Frame");
			namedWindow("FG Mask MOG 2");

			// create Background Subtractor objects
			Ptr<BackgroundSubtractor> pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach

			for (auto f : fgImageFiles) {
				if (processImage(f, pMOG2)) {
					cerr << "Unable to open image file: " << f << endl;
					exit(EXIT_FAILURE);
				}
				char keyboard = (char)0;
				while (keyboard != 'q' && keyboard != 27) {
					keyboard = waitKey(10);
				}
			}
			cout << "Processed all image files." << endl;

			// destroy GUI windows
			destroyAllWindows();

			return 0;
		}
		int SubtractProcessor::processImage(const string filename, Ptr<BackgroundSubtractor> pMOG2)
		{
			static int counter = 0;

			// Read the image file.
			Mat frame = imread(filename);
			if (frame.empty()) {
				//error in opening the image
				return -1;
			}

			Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
			pMOG2->apply(frame, fgMaskMOG2);
			rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
				cv::Scalar(255, 255, 255), -1);
			putText(frame, std::to_string(counter), cv::Point(15, 15),
				FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));

			//show the current frame and the fg masks
			imshow("Frame", frame);
			imshow("FG Mask MOG 2", fgMaskMOG2);

			//int keyboard = 0;
			//while ((char)keyboard != 'q' && (char)keyboard != 27) {
			//	//get the input from the keyboard
			//	keyboard = waitKey(30);
			//}
			counter++;

			return 0;
		}
	}
}
