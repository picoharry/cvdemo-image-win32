// CVDemo.Image.Subtract.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/video.hpp>
#include <stdio.h>
#include <sstream>
#include <stdexcept>
// #include <boost/program_options.hpp>
#include "CVDemo.Image.ProgramOptions.hpp"

using namespace cv;
using namespace std;
using namespace cvdemo::image;
// namespace po = boost::program_options;


// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard

// Forward decl.
// void processImages(const char* firstFrameFilename);
void processImages(const string filename);


int main(int argc, const char* argv[])
{
    // testing...
    string configFile = "../cvdemo.image.subtract.cfg";
    ProgramOptions options = ProgramOptions(argc, argv, configFile);

	if (options.IsForUsageInfo()) {
		options.DisplayUsageInfo(cout);
		system("pause");
		return -1;
	}
	if (options.IsForVersionInfo()) {
		cout << "Version = 0.0.1" << endl;
		system("pause");
		return -1;
	}
	if (options.IsForOptionsDisplay()) {
		options.DisplayInputOptions(cout);
		system("pause");
		return -1;
	}

	if (! options.IsValid()) {
		cerr << ">>> Invalid input options." << endl;

		//vector<string> unrecognized = options.GetUnrecognizedArgs();
		//for (auto &i : unrecognized) {
		//	cerr << "Unrecognised: " << i << endl;
		//}
		options.DisplayUnrecognizedArgs(cerr);
		options.DisplayResizeAllowed(cerr);
		options.DisplayImageFileNames(cerr);
		options.DisplayBlendingWeights(cerr);

		options.DisplayUsageInfo(cerr);

		system("pause");
		return -1;
	}







	////check for the input parameter correctness
	//if (argc != 2) {
	//	cerr << "Incorret input list" << endl;
	//	cerr << "exiting..." << endl;
	//	// system("pause");
	//	return EXIT_FAILURE;
	//}

	//create GUI windows
	namedWindow("Frame");
	namedWindow("FG Mask MOG 2");

	//create Background Subtractor objects
	pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach

											  //input data coming from a sequence of images


	// temporary
	// char* name = const_cast<char *>(argv[1]);
	//const char* name = options.GetForegroundImageFiles()[0].c_str();
	//// const char* name = "../../sample-data/lena.jpg";
	//processImages(name);

	const string filename = options.GetImageFiles()[0];
	processImages(filename);

	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}


void processImages(const string fistFrameFilename)
{
	//read the first file of the sequence
	//const string filename = "../../sample-data/lena.jpg";
	//frame = imread(filename);
	frame = imread(fistFrameFilename);
	if (frame.empty()) {
		//error in opening the first image
		cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
		exit(EXIT_FAILURE);
	}

	//current image filename
	string fn(fistFrameFilename);
	//read input data. ESC or 'q' for quitting
	while ((char)keyboard != 'q' && (char)keyboard != 27) {
		//update the background model
		pMOG2->apply(frame, fgMaskMOG2);
		//get the frame number and write it on the current frame
		size_t index = fn.find_last_of("/");
		if (index == string::npos) {
			index = fn.find_last_of("\\");
		}
		size_t index2 = fn.find_last_of(".");
		string prefix = fn.substr(0, index + 1);
		string suffix = fn.substr(index2);
		string frameNumberString = fn.substr(index + 1, index2 - index - 1);
		istringstream iss(frameNumberString);
		int frameNumber = 0;
		iss >> frameNumber;
		rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
			cv::Scalar(255, 255, 255), -1);
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
			FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG 2", fgMaskMOG2);
		//get the input from the keyboard
		keyboard = waitKey(30);

		// tbd:

		////search for the next image in the sequence
		//ostringstream oss;
		//oss << (frameNumber + 1);
		//string nextFrameNumberString = oss.str();
		//string nextFrameFilename = prefix + nextFrameNumberString + suffix;
		////read the next frame
		//frame = imread(nextFrameFilename);
		//if (frame.empty()) {
		//	//error in opening the next image in the sequence
		//	cerr << "Unable to open image frame: " << nextFrameFilename << endl;
		//	exit(EXIT_FAILURE);
		//}
		////update the path of the current frame
		//fn.assign(nextFrameFilename);

	}
}
