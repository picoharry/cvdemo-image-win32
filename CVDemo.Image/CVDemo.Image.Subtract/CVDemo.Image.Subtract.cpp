// CVDemo.Image.Subtract.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/video.hpp>
#include <stdio.h>
#include <sstream>
#include <stdexcept>
// #include <boost/program_options.hpp>
#include "CVDemo.Image.ProgramOptions.hpp"

using namespace cv;
using namespace std;
using namespace cvdemo::image;
// namespace po = boost::program_options;


// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard

// Forward decl.
void processImages(const char* firstFrameFilename);


int main(int argc, const char* argv[])
{
	//// http://www.boost.org/doc/libs/1_62_0/doc/html/program_options.html


	//// Declare a group of options that will be 
	//// allowed only on command line
	//po::options_description generic("Generic options");
	//generic.add_options()
	//	("version,V", "Print version string")
	//	("help,H", "Produce help message")
	//	;

	//// Declare a group of options that will be 
	//// allowed both on command line and in
	//// config file
	//po::options_description config("Configuration");
	//config.add_options()
	//	// Why is the value type vector<string>, not string?????
	//	//("foreground-image,F", po::value<string>()->multitoken(), "Foreground image file")
	//	//("background-image,B", po::value<string>()->multitoken(), "Background image file")
	//	("foreground-image,F", po::value<vector<string>>()->multitoken(), "Foreground image file")
	//	("background-image,B", po::value<vector<string>>()->multitoken(), "Background image file")
	//	;

	//// Hidden options, will be allowed both on command line and
	//// in config file, but will not be shown to the user.
	//float scale_factor;
	//po::options_description hidden("Hidden options");
	//hidden.add_options()
	//	("scale-factor,S", po::value<float>(&scale_factor)->default_value(1.0f), "Scale factor (default: 1.0)")
	//	;



	//po::options_description cmdline_options;
	//cmdline_options.add(generic).add(config).add(hidden);

	//po::options_description config_file_options;
	//config_file_options.add(config).add(hidden);

	//po::options_description visible("Allowed options");
	//visible.add(generic).add(config);



	//po::variables_map vm;
	//// ???
	//// po::store(po::command_line_parser(argc, argv).options(cmdline_options).run(), vm);
	//try {
	//	// po::store(po::parse_command_line(argc, argv, cmdline_options), vm);
	//	// Ignore unknown options???
	//	po::parsed_options cmdlineParsed = po::command_line_parser(argc, argv).options(cmdline_options).allow_unregistered().run();
	//	po::store(cmdlineParsed, vm);

	//	vector<string> unrecognized = po::collect_unrecognized(cmdlineParsed.options, po::collect_unrecognized_mode::include_positional);
	//	for (auto &i : unrecognized) {
	//		cout << "Unrecognised: " << i << endl;
	//	}
	//}
	//catch (const exception& e) {   // ignore
	//	cerr << e.what() << endl;

	//	return -1;
	//}
	//catch (...)
	//{
	//	// testing...
	//	cout << "catch all" << endl;
	//	cerr << "catch all" << endl;

	//}
	//// ???
	//try {
	//	po::parsed_options configParsed = po::parse_config_file<char>("cvdemo.image.subtract.cfg", config_file_options);
	//	po::store(configParsed, vm, true);
	//}
	//catch (const exception& e) {   // ignore
	//	cerr << e.what() << endl;
	//}
	//// ???
	//po::notify(vm);



	//if (vm.count("help")) {
	//	cout << visible << endl;
	//	return 1;
	//}
	//if (vm.count("version")) {
	//	cout << "version..." << endl;
	//	return 1;
	//}

	//cout << "Scale factor was set to " << vm["scale-factor"].as<float>() << "." << endl;

	//if (vm.count("foreground-image")) {
	//	// ???
	//	// cout << "Foreground image files: " << vm["foreground-image"].as<vector<string>>() << "." << endl;
	//	cout << "Foreground image file count: " << vm["foreground-image"].as<vector<string>>().size() << "." << endl;
	//	cout << "Foreground image files: " << endl;
	//	for (auto &i : vm["foreground-image"].as<vector<string>>()) {
	//		cout << i << endl;
	//	}

	//	//const string arr[] = {"aa.png", "bb.png"};
	//	//vector<string> vec(arr, arr + sizeof(arr) / sizeof(arr[0]));
	//	//// count << vec.at<string>(0) << endl;
	//	//for (auto &i : vec) {
	//	//	std::cout << i << endl;
	//	//}


	//}
	//else {
	//	// error? Use default value????
	//	cout << "Foreground image files not specified." << endl;
	//}
	//if (vm.count("background-image")) {
	//	// ???
	//	//cout << "Background image files: " << vm["background-image"].as<vector<string>>() << "." << endl;
	//	cout << "Background image file count: " << vm["background-image"].as<vector<string>>().size() << "." << endl;
	//	cout << "Background image files: " << endl;
	//	for (auto &i : vm["background-image"].as<vector<string>>()) {
	//		cout << i << endl;
	//	}
	//}
	//else {
	//	// error? Use default value????
	//	cout << "Background image files not specified." << endl;
	//}




    // testing...
    string configFile = "../cvdemo.image.subtract-sample.cfg";
    ProgramOptions options = ProgramOptions(argc, argv, configFile);

	if (options.IsForUsageInfo()) {
		options.DisplayUsageInfo(cout);
		system("pause");
		return -1;
	}
	if (options.IsForVersionInfo()) {
		cout << "Version = 0.0.1" << endl;
		system("pause");
		return -1;
	}
	if (options.IsForOptionsDisplay()) {
		options.DisplayInputOptions(cout);
		system("pause");
		return -1;
	}

	if (! options.IsValid()) {
		cerr << ">>> Invalid input options." << endl;

		//vector<string> unrecognized = options.GetUnrecognizedArgs();
		//for (auto &i : unrecognized) {
		//	cerr << "Unrecognised: " << i << endl;
		//}
		options.DisplayUnrecognizedArgs(cerr);
		options.DisplayScaleFactor(cerr);
		options.DisplayForegroundImageFiles(cerr);
		options.DisplayBackgroundImageFiles(cerr);

		options.DisplayUsageInfo(cerr);

		system("pause");
		return -1;
	}







	////check for the input parameter correctness
	//if (argc != 2) {
	//	cerr << "Incorret input list" << endl;
	//	cerr << "exiting..." << endl;
	//	// system("pause");
	//	return EXIT_FAILURE;
	//}

	//create GUI windows
	namedWindow("Frame");
	namedWindow("FG Mask MOG 2");

	//create Background Subtractor objects
	pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach

											  //input data coming from a sequence of images


	// temporary
	// char* name = const_cast<char *>(argv[1]);
	const char* name = options.GetForegroundImageFiles()[0].c_str();

	processImages(name);


	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}


void processImages(const char* fistFrameFilename)
{
	//read the first file of the sequence
	frame = imread(fistFrameFilename);
	if (frame.empty()) {
		//error in opening the first image
		cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
		exit(EXIT_FAILURE);
	}
	//current image filename
	string fn(fistFrameFilename);
	//read input data. ESC or 'q' for quitting
	while ((char)keyboard != 'q' && (char)keyboard != 27) {
		//update the background model
		pMOG2->apply(frame, fgMaskMOG2);
		//get the frame number and write it on the current frame
		size_t index = fn.find_last_of("/");
		if (index == string::npos) {
			index = fn.find_last_of("\\");
		}
		size_t index2 = fn.find_last_of(".");
		string prefix = fn.substr(0, index + 1);
		string suffix = fn.substr(index2);
		string frameNumberString = fn.substr(index + 1, index2 - index - 1);
		istringstream iss(frameNumberString);
		int frameNumber = 0;
		iss >> frameNumber;
		rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
			cv::Scalar(255, 255, 255), -1);
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
			FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG 2", fgMaskMOG2);
		//get the input from the keyboard
		keyboard = waitKey(30);
		//search for the next image in the sequence
		ostringstream oss;
		oss << (frameNumber + 1);
		string nextFrameNumberString = oss.str();
		string nextFrameFilename = prefix + nextFrameNumberString + suffix;
		//read the next frame
		frame = imread(nextFrameFilename);
		if (frame.empty()) {
			//error in opening the next image in the sequence
			cerr << "Unable to open image frame: " << nextFrameFilename << endl;
			exit(EXIT_FAILURE);
		}
		//update the path of the current frame
		fn.assign(nextFrameFilename);
	}
}
